(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{361:function(e,t,a){"use strict";a.r(t);var r=a(43),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"swagger-spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swagger-spring-boot"}},[e._v("#")]),e._v(" swagger-spring-boot")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://search.maven.org/search?q=g:com.purgeteam%20AND%20a:swagger-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/maven-central/v/com.purgeteam/swagger-spring-boot-starter.svg?label=Maven%20Central",alt:"Maven Central"}}),a("OutboundLink")],1),e._v(" "),a("img",{attrs:{src:"https://img.shields.io/badge/SpringBoot-2.1.7RELEASE-green.svg",alt:"License"}}),e._v(" "),a("img",{attrs:{src:"https://img.shields.io/badge/JAVA-1.8+-green.svg",alt:"License"}}),e._v(" "),a("img",{attrs:{src:"https://img.shields.io/badge/maven-3.0+-green.svg",alt:"License"}}),e._v(" "),a("a",{attrs:{href:"https://www.apache.org/licenses/LICENSE-2.0.html",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/license-Apache%202-4EB1BA.svg",alt:"License"}}),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),a("p",[e._v("可能大家都有用过"),a("code",[e._v("swagger")]),e._v(",可以通过"),a("code",[e._v("ui")]),e._v("页面显示接口信息，快速和前端进行联调。")]),e._v(" "),a("p",[e._v("现在基本都是多模块微服务化，每个服务都有这样的ui页面也是很不方便，"),a("code",[e._v("swagger")]),e._v(" 也可以聚合在网关页面。")]),e._v(" "),a("p",[e._v("有开发过微服务的小伙伴应该体验过。当微服务模块多的情况下，每个模块都需要配置这样的一个类进行加载 "),a("code",[e._v("swagger")]),e._v(" 。造成每个模块都存在大致一样的 "),a("code",[e._v("SwaggerConfig")]),e._v(" ,极端的情况下，有些朋友复制其他模块的 "),a("code",[e._v("SwaggerConfig")]),e._v(" 进行改造之后，发现仍然加载不出 "),a("code",[e._v("swagger")]),e._v(" 的情况，造成明明是复制的，为何还加载不出，排查此bug极其费时间。")]),e._v(" "),a("p",[e._v("在此之上，可以构建出一个 "),a("code",[e._v("swagger-starter")]),e._v(" 模块，只需要引用一个 "),a("code",[e._v("jar")]),e._v(" ，加载一些特殊的配置，就可以快速地使用到 "),a("code",[e._v("swagger")]),e._v(" 的部分功能了。")]),e._v(" "),a("p",[a("strong",[e._v("新特性")])]),e._v(" "),a("p",[e._v("在原有 "),a("code",[e._v("swagger")]),e._v(" 功能之上集成 "),a("code",[e._v("knife4j")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("knife4j")]),e._v(" 是 "),a("code",[e._v("springfox-swagger")]),e._v(" 的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验。")]),e._v(" "),a("p",[e._v("该UI增强包主要包括两大核心功能："),a("strong",[e._v("文档说明")]),e._v(" 和 "),a("strong",[e._v("在线调试")])]),e._v(" "),a("p",[a("strong",[e._v("文档说明：")]),e._v(" 根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。")]),e._v(" "),a("p",[a("strong",[e._v("在线调试：")]),e._v(" 提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。")]),e._v(" "),a("h2",{attrs:{id:"功能使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能使用"}},[e._v("#")]),e._v(" 功能使用")]),e._v(" "),a("h3",{attrs:{id:"添加依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖"}},[e._v("#")]),e._v(" 添加依赖")]),e._v(" "),a("p",[a("strong",[e._v("ps:")]),e._v(" 实际version版本请使用最新版\n"),a("strong",[e._v("最新版本:")]),e._v(" "),a("a",{attrs:{href:"https://search.maven.org/search?q=g:com.purgeteam%20AND%20a:swagger-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/maven-central/v/com.purgeteam/swagger-spring-boot-starter.svg?label=Maven%20Central",alt:"Maven Central"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://search.maven.org/search?q=g:com.purgeteam%20AND%20a:swagger-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击查看最新新版本"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n  <groupId>com.purgeteam</groupId>\n  <artifactId>swagger-spring-boot-starter<factId>\n  <version>0.2.0.RELEASE</version>\n</dependency>\n")])])]),a("h3",{attrs:{id:"配置swagger-properties文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置swagger-properties文件"}},[e._v("#")]),e._v(" 配置swagger.properties文件")]),e._v(" "),a("p",[e._v("在自己项目模块的"),a("code",[e._v("resources")]),e._v("目录下 创建"),a("code",[e._v("swagger.properties")]),e._v("配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('swagger.basePackage="swagger扫描项目包路径"\nswagger.title="swagger网页显示标题"\nswagger.description="swagger网页显示介绍"\n')])])]),a("h3",{attrs:{id:"enableswaggerplugins注解。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enableswaggerplugins注解。"}},[e._v("#")]),e._v(" "),a("code",[e._v("@EnableSwaggerPlugins")]),e._v("注解。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@EnableSwaggerPlugins\n@SpringBootApplication\npublic class FrontDemoApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(FrontDemoApplication.class, args);\n  }\n\n}\n")])])]),a("p",[e._v("访问"),a("code",[e._v("http://ip:端口/swagger-ui.html")]),e._v("检查swagger-ui是否正常。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/2019-12-27/00.png",alt:"image.png"}})]),e._v(" "),a("h2",{attrs:{id:"zuul网关集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zuul网关集成"}},[e._v("#")]),e._v(" Zuul网关集成")]),e._v(" "),a("p",[e._v("做完上面步骤一个单体服务已经完成了 "),a("code",[e._v("swagger")]),e._v(" 的配置。")]),e._v(" "),a("p",[e._v("集成到 "),a("code",[e._v("zuul")]),e._v(" 网关上还需要配置其他的集成配置。")]),e._v(" "),a("p",[e._v("不过使用 "),a("code",[e._v("swagger-spring-boot-starter")]),e._v(" 之后，流程变得很轻松。")]),e._v(" "),a("p",[e._v("只需要添加下面 "),a("code",[e._v("@EnableSwaggerZuul")]),e._v(" 注解即可完成集成动作。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@EnableSwaggerZuul\n@SpringBootApplication\npublic class ZuulApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(ZuulApplication.class, args);\n  }\n\n}\n")])])]),a("p",[e._v("访问"),a("code",[e._v("http://ip:端口/swagger-ui.html")]),e._v("检查swagger-ui是否正常。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/2019-12-27/00.png",alt:"image.png"}})]),e._v(" "),a("p",[a("strong",[e._v("状态支持")])]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Select a spec")]),e._v(" 选择框里可以选择网关下的微服务列表进行聚合展示。")]),e._v(" "),a("p",[e._v("这里也支持了服务状态显示。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('health > "用户服务"(user)\nhealth > "认证服务"(auth)\nsick > front-demo(已下线)\nsick > giant-demo(已下线)\n')])])]),a("p",[e._v("这里的 "),a("code",[e._v("用户服务")]),e._v(" "),a("code",[e._v("认证服务")]),e._v(" 名称是根据相应服务的 "),a("code",[e._v("swagger.properties")]),e._v(" 文件属性名 "),a("code",[e._v("swagger.title")]),e._v(" 获取。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/2019-12-27/01.png",alt:"image.png"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/2019-12-27/02.png",alt:"image.png"}})]),e._v(" "),a("h3",{attrs:{id:"ui访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui访问"}},[e._v("#")]),e._v(" UI访问")]),e._v(" "),a("p",[e._v("访问地址： "),a("code",[e._v("http://ip:端口/doc.html")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-home.png",alt:"image.png"}})]),e._v(" "),a("p",[e._v("可以访问基本ok。")]),e._v(" "),a("h3",{attrs:{id:"全局token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局token"}},[e._v("#")]),e._v(" 全局token")]),e._v(" "),a("p",[e._v("新增 "),a("code",[e._v("Authorize")]),e._v(" 全局 "),a("code",[e._v("token")])]),e._v(" "),a("p",[e._v("默认参数设置为了 "),a("code",[e._v("Authorization")]),e._v(" 储存在 "),a("code",[e._v("header")]),e._v(", 如和自己的参数不一致请在 "),a("code",[e._v("通用参数配置")]),e._v(" 设置。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-token.png",alt:"knife4j-token.png"}})]),e._v(" "),a("h3",{attrs:{id:"通用参数配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用参数配置"}},[e._v("#")]),e._v(" 通用参数配置")]),e._v(" "),a("p",[e._v("通用参数配置是一个比较常用的功能，如 携带 "),a("code",[e._v("token")]),e._v(" 访问接口。")]),e._v(" "),a("p",[e._v("和 "),a("code",[e._v("postman")]),e._v(" 功能类似，解决 "),a("code",[e._v("swagger")]),e._v(" 缺陷。")]),e._v(" "),a("p",[a("strong",[e._v("开启功能")])]),e._v(" "),a("p",[a("strong",[e._v("路径：")]),e._v(" "),a("code",[e._v("文档管理/个性化设置")])]),e._v(" "),a("ul",[a("li",[e._v("启用Knife4j提供的增强功能")]),e._v(" "),a("li",[e._v("开启动态请求参数")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-function.png",alt:"image.png"}})]),e._v(" "),a("p",[a("strong",[e._v("添加参数")])]),e._v(" "),a("p",[a("strong",[e._v("路径：")]),e._v(" "),a("code",[e._v("文档管理/全局参数设置")])]),e._v(" "),a("p",[e._v("添加 "),a("code",[e._v("oauth2 token")]),e._v(" 值已自己登陆token 前缀记得添加 "),a("code",[e._v("Bearer")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("参数名称: Authorization\n参数值: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODI4MjYyNTIsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9KSUFPU0UxIiwiUk9MRV9NRU1CRVJTIl0sImp0aSI6IjA3YWZjMDVhLWU3NjYtNDMxOC1iZGRmLWJkMWU4NTExOWU5MiIsImNsaWVudF9pZCI6InNzby1hdXRoLXNlcnZlciIsInNjb3BlIjpbInNlcnZlciJdfQ.LFMcZTXb0g4xTzRo8kVAwBbXe12-XRsYWJkHFBRCbWg\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-parameter.png",alt:"image.png"}})]),e._v(" "),a("p",[a("strong",[e._v("访问接口")])]),e._v(" "),a("p",[e._v("需要登陆的接口 在请求头里会默认都添加有 "),a("code",[e._v("Authorization")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-user.png",alt:"image.png"}})]),e._v(" "),a("h3",{attrs:{id:"离线文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#离线文档"}},[e._v("#")]),e._v(" 离线文档")]),e._v(" "),a("p",[e._v("Knife4j提供导出4种格式的离线文档(Html\\Markdown\\Word\\Pdf)")]),e._v(" "),a("p",[a("strong",[e._v("路径:")]),e._v(" 文档管理/离线文档")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/purgeyao/purgeyao.github.io/master/img/blog/other/knife4j/knife4j-document.png",alt:"image.png"}})]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("简单的"),a("code",[e._v("starter")]),e._v("代码编写可以减少新模块的复杂性，只需要简单的配置就可以使用相应的特性，减少复制代码不必要的错误。")]),e._v(" "),a("blockquote",[a("p",[e._v("示例代码地址:"),a("a",{attrs:{href:"https://github.com/purgeteam/swagger-spring-boot",target:"_blank",rel:"noopener noreferrer"}},[e._v("swagger-spring-boot"),a("OutboundLink")],1)])]),e._v(" "),a("blockquote",[a("p",[e._v("作者GitHub:\n"),a("a",{attrs:{href:"https://github.com/purgeyao",target:"_blank",rel:"noopener noreferrer"}},[e._v("Purgeyao"),a("OutboundLink")],1),e._v(" 欢迎关注")])]),e._v(" "),a("blockquote",[a("p",[e._v("qq交流群: "),a("code",[e._v("812321371")]),e._v(" 微信交流群: "),a("code",[e._v("MercyYao")])])]),e._v(" "),a("blockquote",[a("p",[e._v("微信公众号:")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://purgeyao.github.io/img/about-my-mp-8cm.jpg",alt:"微信公众号二维码"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);